networks:
  appnet:
    driver: bridge

services:
  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000
    volumes:
      - ./frontend:/app:cached
      - /app/node_modules
    depends_on:
      api:
        condition: service_started
    networks:
      - appnet
    ports:
      - "${FRONTEND_PORT:-5173}:5173"

  # API Gateway
  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - ENVIRONMENT=${ENVIRONMENT}
    volumes:
      - ./services/api:/app:cached
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - appnet
    ports:
      - "${API_PORT:-8000}:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Monitor Service
  monitor:
    build:
      context: ./services/monitor
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=${REDIS_URL}
    volumes:
      - ./services/monitor:/app:cached
    depends_on:
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - appnet
    restart: unless-stopped

  # Checkout Service
  checkout:
    build:
      context: ./services/checkout
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=${REDIS_URL}
      - DATABASE_URL=${DATABASE_URL}
    volumes:
      - ./services/checkout:/app:cached
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - appnet

  # Celery Worker
  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=${REDIS_URL}
      - DATABASE_URL=${DATABASE_URL}
    volumes:
      - ./worker:/app:cached
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - appnet
    command: celery -A tasks worker --loglevel=info

  # Celery Beat
  beat:
    build:
      context: ./worker
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=${REDIS_URL}
      - DATABASE_URL=${DATABASE_URL}
    volumes:
      - ./worker:/app:cached
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - appnet
    command: celery -A tasks beat --loglevel=info

  # Redis
  redis:
    image: redis:7-alpine
    volumes:
      - redis-data:/data
    networks:
      - appnet
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - appnet
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./infra/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - appnet
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Grafana
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./infra/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infra/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - appnet
    ports:
      - "3000:3000"

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:
